options {
  IGNORE_CASE = true;
  STATIC = false;
//  DEBUG_LOOKAHEAD = true;
//  DEBUG_PARSER = true;
}

PARSER_BEGIN(Gramatica)

package analizador.descendente;

import abstracto.AST;
import expresiones.Funcion;
import expresiones.Primitivo;
import expresiones.Identificador;
import expresiones.ExpresionLogica;
import expresiones.ExpresionLogica.OperadorLogico;
import expresiones.ExpresionTernaria;
import expresiones.ExpresionAritmetica;
import expresiones.ExpresionAritmetica.OperadorAritmetico;
import expresiones.ExpresionRelacional;
import expresiones.ExpresionRelacional.OperadorRelacional;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.If;
import instrucciones.Return;
import instrucciones.Break;
import instrucciones.Continue;
import expresiones.Llamada;
import estructuras.Vector;
import instrucciones.Declaracion;
import tablasimbolos.Arbol;
import tablasimbolos.Tipo;
import tablasimbolos.Tipo.TipoDato;
import tablasimbolos.Tipo.TipoEstructura;
import java.util.ArrayList;

public class Gramatica {
}
PARSER_END(Gramatica)

/** Lexico */
SKIP : {
      " "
    | "\t"
    | "\r"
    | "\n"
    | <"#*"> {System.out.println("ML comment start -- " +image);} : MULTI_LINE_COMMENT
    | <"#"> {System.out.println("SL comment start -- " +image);} : IN_LINE_COMMENT
}

/* Comments */
<IN_LINE_COMMENT> SKIP:
{
   "\n" {System.out.println("SL comment end -- " +image);} : DEFAULT
}

<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}

<MULTI_LINE_COMMENT> SKIP:
{
   "#*" {System.out.println("ML comment end -- " +image);} : DEFAULT
}

<MULTI_LINE_COMMENT> MORE:
{
  < ~[] >
}

TOKEN : {
      <INTEGER: (["0"-"9"])+>
    | <NUMERIC: (["0"-"9"])+"."(["0"-"9"])+>
    | <BOOLEAN: ("true"|"false")>
    | <NULL: "null">
    | <FOR: "for">
    | <IN: "in">
    | <DO: "do">
    | <WHILE: "while">
    | <IF: "if">
    | <ELSE: "else">
    | <COMA: ",">
    | <PCOMA: ";">
    | <PARINI: "(">
    | <PAREND: ")">
    | <CORI: "[">
    | <CORD: "]">
    | <LLAVEI: "{">
    | <LLAVED: "}">
    | <MAS: "+">
    | <MENOS: "-">
    | <POR: "*">
    | <DIV: "/">
    | <MODULO: "%">
    | <IGUAL: "=">
    | <MENORQUE: "<">
    | <MAYORQUE: ">">
    | <MENORIGUAL: "<=">
    | <MAYORIGUAL: ">=">
    | <IGUALA: "==">
    | <DIFERENTEDE: "!=">
    | <AND: "&">
    | <OR: "|">
    | <NOT: "!" >
    | <QUESTION_MARK: "?" >
    | <DOS_PUNTOS: ":" >
    | <FUNCION: "function" >
    | <RETORNO: "return" >
    | <BREAK: "break" >
    | <CONTINUE: "continue" >
    | <IDENTIFICADOR: (["a"-"z"] | "." ("." | ["a"-"z"] | "_"  )+ ) ("." | ["a"-"z"] | "_" | ["0"-"9"] )* >
}

///**
//* ID STARTING WITH DOT
//*/
//MORE :
//{
//    "." : ID_DOT_STATE
//}
//
//<ID_DOT_STATE> MORE :
//{
//    <("." | ["a"-"z"] | "_")+ ("." | ["a"-"z"] | "_" | ["0"-"9"])* >
//}
//
//<ID_DOT_STATE> TOKEN:
//{
//   <IDENTIFICADOR_PUNTO: [" ","\t","\r","\n"]>
//   { matchedToken.image = image.toString().trim(); } : DEFAULT
//}
//
///**
//* ID STARTING WITH LETTER
//*/
//MORE :
//{
//    <["a"-"z"]> : ID_LETTER_STATE
//}
//
//<ID_LETTER_STATE> MORE :
//{
//    <("." | ["a"-"z"] | "_" | ["0"-"9"])+ >
//}
//
//<ID_LETTER_STATE> TOKEN:
//{
//   <IDENTIFICADOR_LETRA: [" ","\t","\r","\n"]>
//   { matchedToken.image = image.toString().trim().substring(0,image.length()-1); } : DEFAULT
//}

/**
* STRING Tokens
* **/
MORE :
{
    "\"" : STRING_STATE
}

<STRING_STATE> MORE :
{
    <"\\\""> {
        System.out.println("COMILLA DOBLE -- " + image);
        int pos = image.length() - 2;
        image.replace(pos, pos + 2, "\"");
        System.out.println("COMILLA DOBLE DESPUES DE PROCESAR -- " + image);
        }
    |
    <~["\""]>
}

<STRING_STATE> TOKEN:
{
   <STRING:"\""> {
                     System.out.println("TOKEN STRING_STATE -- " + image);
                     System.out.println("TOKEN STRING_STATE MATCHED TOKEN -- " + matchedToken.image);
                     matchedToken.image = image.toString().trim();

                     } : DEFAULT
}

/**  FIN LEXICO **/


/************** INICIO PARSER ****************/

/** ProducciÃ³n inicial
    analizar -> (instruccion)+ EOF
*/
Arbol analizar() :
{ArrayList<AST> instrucciones = new ArrayList<AST>(); AST e;}
{
  (e=instruccion() { instrucciones.add(e); } )+ <EOF>
  { System.out.println("END OF FILE");
    System.out.println("Instruccion " + e);

    return new Arbol(instrucciones); }
}
 /**
 * instruccion -> declaracion
*/
AST instruccion() :
{AST e;}
{
    LOOKAHEAD(3) e = funcion()
    { return e; }
    |
    LOOKAHEAD(2) e = llamada() (<PCOMA>)? { return e; }
    |
    e = declaracion()
    { return e; }
    |
    e = retorno() { return e; }
    |
    e = insBreak() { return e; }
    |
    e = insContinue() { return e; }
    |
    e = sentenciaIf()
    { return e; }
    |
    e = cicloFor()
    { return e; }
    |
    e = cicloWhile()
    { return e; }
    |
    e = cicloDoWhile() (<PCOMA>)?
    { return e; }


//    |
//    e = asignacion()
//    {
//        return e;
//    }
}

/**
* declaracion -> ID = expresion (;)*
*/
AST declaracion() :
{ Token id; AST e; }
{
    id = <IDENTIFICADOR> <IGUAL> e = expresion() (<PCOMA>)?
    {   System.out.println("declaracion *** " + e);
        return new Declaracion(id.image.trim(), e, token.beginLine, token.beginColumn); }
}

/**
* funcion -> ID = function(lista_parametros) { (instruccion)+ }
*/
AST funcion() :
{ Token id; ArrayList<AST> listaParametros, bloqueInstrucciones; AST e; }
{
    LOOKAHEAD(3) id = <IDENTIFICADOR> <IGUAL>  <FUNCION> <PARINI> { System.out.println("FUNCTION -- " + id.image);}
        listaParametros = listaParametros() <PAREND> bloqueInstrucciones = bloqueInstrucciones()
    { return new Funcion(id.image.trim(), listaParametros, bloqueInstrucciones, token.beginLine, token.beginColumn); }
    |
    id = <IDENTIFICADOR> <IGUAL> <PARINI> listaParametros = listaParametros() <PAREND>
    <IGUAL><MAYORQUE> bloqueInstrucciones = bloqueInstrucciones()
    { return new Funcion(id.image.trim(), listaParametros, bloqueInstrucciones, token.beginLine, token.beginColumn); }
}

AST llamada() :
{ArrayList<AST> expresiones; Token t;}
{
    t=<IDENTIFICADOR> <PARINI> expresiones=listaExpresiones() <PAREND>
    { return new Llamada(t.image.trim(), expresiones, t.beginLine, t.beginColumn); }
}

ArrayList<AST> listaExpresiones() :
{ArrayList<AST> lista = new ArrayList<AST>(); AST e;}
{
    (
        e=expresion() {lista.add(e);}
        (
            <COMA> e=expresion() {lista.add(e);}
        )*
    )?
    {return lista;}
}

/**
* listaParametros -> expresion ( ',' expresion )*
*/
ArrayList<AST> listaParametros() :
{ Token id, id2; AST e, e1; ArrayList<AST> listaParametros = new ArrayList<AST>(); }
{
    (
        id = <IDENTIFICADOR>
        {
            System.out.println("parametro ID");
            e = new Identificador(id.image.trim(), token.beginLine, token.beginColumn);
        }
        ( <IGUAL> e = expresion()
            {   System.out.println("parametro EXPRESION");
                e = new Declaracion(id.image.trim(), e, token.beginLine, token.beginColumn);
            }
        )?
        { listaParametros.add(e); }
        (
            LOOKAHEAD(2) <COMA> id2 = <IDENTIFICADOR>
            {
                System.out.println("parametro ID");
                e1 = new Identificador(id2.image.trim(), token.beginLine, token.beginColumn);
            }
            ( <IGUAL> e1 = expresion()
                {
                    System.out.println("parametro EXPRESION");
                    e1 = new Declaracion(id2.image.trim(), e1, token.beginLine, token.beginColumn);
                }
            )?
            { listaParametros.add(e1); }
        )*
    )?
    { return listaParametros; }
}

/**
* bloqueInstrucciones -> { (instruccion)* }
*/
ArrayList<AST> bloqueInstrucciones() :
{ ArrayList<AST> instrucciones = new ArrayList<AST>(); AST e;}
{
    <LLAVEI> (e = instruccion() { instrucciones.add(e); } )* <LLAVED>
    { return instrucciones; }
}

AST sentenciaIf() :
{ AST e, e1; ArrayList<AST> instruccionesIf, instruccionesElse = new ArrayList<AST>(); }{
    <IF> <PARINI> e = expresion() <PAREND> instruccionesIf = bloqueInstrucciones()
    (
        LOOKAHEAD(2) <ELSE> e1 = sentenciaIf() { instruccionesElse.add(e1); }
        |
        <ELSE> instruccionesElse = bloqueInstrucciones()
    )?
    {
        return new If(e, instruccionesIf, instruccionesElse, token.beginLine, token.beginColumn);
    }
}

AST cicloFor() :
{ AST e; Token id; ArrayList<AST> instrucciones; }
{
    <FOR> <PARINI> id = <IDENTIFICADOR> <IN> e = expresion() <PAREND> instrucciones = bloqueInstrucciones()
    { return new For(id.image, e, instrucciones, token.beginLine, token.beginColumn); }
}

AST cicloWhile() :
{ AST e; ArrayList<AST> instrucciones; }
{
    <WHILE> <PARINI> e = expresion() <PAREND> instrucciones = bloqueInstrucciones()
    { return new While(e, instrucciones, token.beginLine, token.beginColumn); }
}

AST cicloDoWhile() :
{ AST e; ArrayList<AST> instrucciones; }
{
    <DO> instrucciones = bloqueInstrucciones() <WHILE> <PARINI> e = expresion() <PAREND>
    { return new DoWhile(e, instrucciones, token.beginLine, token.beginColumn); }
}

///**
//* asignacion -> ID([expresion])+ = expresion
//*/
//AST asignacion() :
//{ Token id; AST e, e1; }
//{
//    id =  <IDENTIFICADOR_LETRA>
//    (
//        <CORI> e = expresion() <CORD>
//    )+
//    <IGUAL> e1 = expresion() (<PCOMA>)?
//    { return new Asignacion(id.image.trim(), e, e1, token.beginLine, token.beginColumn); }
//    |
//    id =  <IDENTIFICADOR_PUNTO>
//    (
//        <CORI> e = expresion() <CORD>
//    )+
//    <IGUAL> e1 = expresion() (<PCOMA>)?
//    { return new Asignacion(id.image.trim(), e, e1, token.beginLine, token.beginColumn); }
//}

AST insBreak() :
{AST e;}
{
    <BREAK> (<PCOMA>)? { return new Break(); }
}

AST insContinue() :
{AST e;}
{
    <CONTINUE> (<PCOMA>)? { return new Continue(); }
}

AST retorno() :
{AST e;}
{
    LOOKAHEAD(2)<RETORNO> <PARINI> e=expresion() <PAREND> (<PCOMA>)? {return new Return(e, token.beginLine, token.beginColumn);}
    |
    <RETORNO> (<PCOMA>)? {return new Return(token.beginLine, token.beginColumn);}
}


/**
* expresion ->  condicion ? exp1 : exp1 [;]
*/
AST expresion() :
{ AST e, e1, e2; }
{
    e = expresionOr() { System.out.println(e);}
    (
        LOOKAHEAD(2) <QUESTION_MARK> e1 = expresion() <DOS_PUNTOS> e2 = expresion()
        { e = new ExpresionTernaria(e, e1, e2, token.beginLine, token.beginColumn); }
    )*
    { return e; }
}

/**
*   expresionOr -> expresionAnd ( '|' expresionAnd )*
*/
AST expresionOr() :
{ AST e, e1; }
{
    e = expresionAnd() { System.out.println(e);}
    (
        <OR> e1 = expresionAnd() { e = new ExpresionLogica(e, e1, OperadorLogico.OR, token.beginLine, token.beginColumn); }
    )*
    { return e; }
}

/**
*   expresionAnd -> expresionIgualdad ( '&' expresionIgualdad )*
*/
AST expresionAnd() :
{ AST e, e1; }
{
    e = expresionIgualdad() { System.out.println(e);}
    (
        <AND> e1 = expresionIgualdad() { e = new ExpresionLogica(e, e1, OperadorLogico.AND, token.beginLine, token.beginColumn); }
    )*
    { return e; }
}

/**
*   expresionAnd -> expresionRelacional ( '==' expresionRelacional )*
                |   expresionRelacional ( '!=' expresionRelacional )*
*/
AST expresionIgualdad() :
{ AST e, e1; }
{
    e = expresionRelacional()
    (
        <DIFERENTEDE> e1 = expresionRelacional() { e = new ExpresionRelacional(e, e1, OperadorRelacional.DIFERENTEDE, token.beginLine, token.beginColumn); }
        |
        <IGUALA> e1 = expresionRelacional() { e = new ExpresionRelacional(e, e1, OperadorRelacional.IGUALA, token.beginLine, token.beginColumn); }

    )*
    { return e; }
}

/**
*   expresionRelacional -> expresionAditiva ( '<' expresionAditiva )*
                |   expresionAditiva ( '>' expresionAditiva )*
                |   expresionAditiva ( '<=' expresionAditiva )*
                |   expresionAditiva ( '>=' expresionAditiva )*
*/
AST expresionRelacional() :
{ AST e, e1; }
{
    e = expresionAditiva()
    (
        <MENORQUE> e1 = expresionAditiva() { e = new ExpresionRelacional(e, e1, OperadorRelacional.MENORQUE, token.beginLine, token.beginColumn); }
        |
        <MAYORQUE> e1 = expresionAditiva() { e = new ExpresionRelacional(e, e1, OperadorRelacional.MAYORQUE, token.beginLine, token.beginColumn); }
        |
        <MENORIGUAL> e1 = expresionAditiva() { e = new ExpresionRelacional(e, e1, OperadorRelacional.MENORIGUAL, token.beginLine, token.beginColumn); }
        |
        <MAYORIGUAL> e1 = expresionAditiva() { e = new ExpresionRelacional(e, e1, OperadorRelacional.MAYORIGUAL, token.beginLine, token.beginColumn); }
    )*
    { return e; }
}

/**
*   expresionAditiva -> expresionMultiplicativa ( '+' expresionMultiplicativa )*
                |   expresionMultiplicativa ( '-' expresionMultiplicativa )*
*/
AST expresionAditiva() :
{ AST e, e1; }
{
    e = expresionMultiplicativa()
    (
        <MAS> e1 = expresionMultiplicativa() { e = new ExpresionAritmetica(e, e1, OperadorAritmetico.SUMA, token.beginLine, token.beginColumn); }
        |
        <MENOS> e1 =  expresionMultiplicativa() { e = new ExpresionAritmetica(e, e1, OperadorAritmetico.RESTA, token.beginLine, token.beginColumn); }
    )*
    { return e; }
}

/**
*   expresionMultiplicativa -> expresionUnaria ( '*' expresionUnaria )*
                |   expresionUnaria ( '/' expresionUnaria )*
*/
AST expresionMultiplicativa() :
{ AST e, e1; }
{
    e = expresionUnaria()
    (
        <POR> e1 = expresionUnaria() { e = new ExpresionAritmetica(e, e1, OperadorAritmetico.MULTIPLICACION, token.beginLine, token.beginColumn); }
        |
        <DIV> e1 = expresionUnaria() { e = new ExpresionAritmetica(e, e1, OperadorAritmetico.DIVISION, token.beginLine, token.beginColumn); }
        |
        <MODULO> e1 = expresionUnaria() { e = new ExpresionAritmetica(e, e1, OperadorAritmetico.MODULO, token.beginLine, token.beginColumn); }
    )*
    { return e; }
}

AST expresionUnaria() :
{ AST e, e1; }
{
    <MENOS> e = expresionUnaria() { return new ExpresionAritmetica(e, OperadorAritmetico.MENOSUNARIO, token.beginLine, token.beginColumn); }
    |
    <NOT> e = expresionUnaria() { return new ExpresionLogica(e, OperadorLogico.NOT, token.beginLine, token.beginColumn); }
    |
    e = primitivo() { return e; }
//    (
//        <CORI> e1 = expresion() { return new } <CORD>
//    )*
//    { return e; }
}

AST primitivo() :
{ AST e; Token t; Vector valor;}
{
        <INTEGER> { System.out.println("INTEGER " + token.image);
            return new Primitivo(new Tipo(TipoDato.INTEGER, TipoEstructura.VECTOR), Integer.parseInt(token.image), token.beginLine, token.beginColumn); }
        |
        <NUMERIC> { System.out.println("NUMERIC " + token.image);
            return new Primitivo(new Tipo(TipoDato.NUMERIC, TipoEstructura.VECTOR), Double.parseDouble(token.image), token.beginLine, token.beginColumn); }
        |
        <BOOLEAN> { System.out.println("BOOLEAN " + token.image);
            return new Primitivo(new Tipo(TipoDato.BOOLEAN, TipoEstructura.VECTOR), Boolean.parseBoolean(token.image), token.beginLine, token.beginColumn);}
        |
        <NULL> { System.out.println("NULL " + token.image);
            return new Primitivo(new Tipo(TipoDato.BOOLEAN, TipoEstructura.VECTOR), Double.parseDouble(token.image), token.beginLine, token.beginColumn);}
        |
        t=<STRING> { System.out.println("STRING " + t.image);
            return new Primitivo(new Tipo(TipoDato.STRING, TipoEstructura.VECTOR), t.image.substring(1,t.image.length()-1), token.beginLine, token.beginColumn);}
//        |
//        t=<IDENTIFICADOR_PUNTO> { System.out.println("ID " + t.image + t.image.length());
//            return new Identificador(t.image.trim(), token.beginLine, token.beginColumn); }
        |
        LOOKAHEAD(2) e = llamada() { return e; }
        |
        t=<IDENTIFICADOR> { System.out.println("ID " + t.image + " - " + t.image.length());
            return new Identificador(t.image.trim(), token.beginLine, token.beginColumn); }
        |

        <PARINI> e=expresion() <PAREND>
        {return e;}
}