/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
package analizador.descendente;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER = 5;
  /** RegularExpression Id. */
  int NUMERIC = 6;
  /** RegularExpression Id. */
  int BOOLEAN = 7;
  /** RegularExpression Id. */
  int NULL = 8;
  /** RegularExpression Id. */
  int FOR = 9;
  /** RegularExpression Id. */
  int IN = 10;
  /** RegularExpression Id. */
  int DO = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int SWITCH = 13;
  /** RegularExpression Id. */
  int CASE = 14;
  /** RegularExpression Id. */
  int DEFAULT_WORD = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int COMA = 18;
  /** RegularExpression Id. */
  int PCOMA = 19;
  /** RegularExpression Id. */
  int PARINI = 20;
  /** RegularExpression Id. */
  int PAREND = 21;
  /** RegularExpression Id. */
  int CORI = 22;
  /** RegularExpression Id. */
  int CORD = 23;
  /** RegularExpression Id. */
  int LLAVEI = 24;
  /** RegularExpression Id. */
  int LLAVED = 25;
  /** RegularExpression Id. */
  int MAS = 26;
  /** RegularExpression Id. */
  int MENOS = 27;
  /** RegularExpression Id. */
  int POR = 28;
  /** RegularExpression Id. */
  int DIV = 29;
  /** RegularExpression Id. */
  int POTENCIA = 30;
  /** RegularExpression Id. */
  int MODULO = 31;
  /** RegularExpression Id. */
  int IGUAL = 32;
  /** RegularExpression Id. */
  int MENORQUE = 33;
  /** RegularExpression Id. */
  int MAYORQUE = 34;
  /** RegularExpression Id. */
  int MENORIGUAL = 35;
  /** RegularExpression Id. */
  int MAYORIGUAL = 36;
  /** RegularExpression Id. */
  int IGUALA = 37;
  /** RegularExpression Id. */
  int DIFERENTEDE = 38;
  /** RegularExpression Id. */
  int AND = 39;
  /** RegularExpression Id. */
  int OR = 40;
  /** RegularExpression Id. */
  int NOT = 41;
  /** RegularExpression Id. */
  int QUESTION_MARK = 42;
  /** RegularExpression Id. */
  int DOS_PUNTOS = 43;
  /** RegularExpression Id. */
  int FUNCION = 44;
  /** RegularExpression Id. */
  int RETORNO = 45;
  /** RegularExpression Id. */
  int BREAK = 46;
  /** RegularExpression Id. */
  int CONTINUE = 47;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 48;
  /** RegularExpression Id. */
  int STRING = 51;

  /** Lexical state. */
  int IN_LINE_COMMENT = 0;
  /** Lexical state. */
  int MULTI_LINE_COMMENT = 1;
  /** Lexical state. */
  int DEFAULT = 2;
  /** Lexical state. */
  int STRING_STATE = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\n\"",
    "<token of kind 2>",
    "\"*#\"",
    "<token of kind 4>",
    "<INTEGER>",
    "<NUMERIC>",
    "<BOOLEAN>",
    "\"null\"",
    "\"for\"",
    "\"in\"",
    "\"do\"",
    "\"while\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"if\"",
    "\"else\"",
    "\",\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"%%\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"?\"",
    "\":\"",
    "\"function\"",
    "\"return\"",
    "\"break\"",
    "\"continue\"",
    "<IDENTIFICADOR>",
    "\"\\\"\"",
    "<token of kind 50>",
    "\"\\\"\"",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"#*\"",
    "\"#\"",
    "<token of kind 58>",
  };

}
