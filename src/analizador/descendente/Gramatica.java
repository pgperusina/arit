/* Gramatica.java */
/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
package analizador.descendente;

import abstracto.AST;
import expresiones.Funcion;
import expresiones.Primitivo;
import expresiones.Identificador;
import expresiones.ExpresionLogica;
import expresiones.ExpresionTernaria;
import expresiones.ExpresionLogica.OperadorLogico;
import expresiones.Retorno;
import instrucciones.Declaracion;
import tablasimbolos.Arbol;
import tablasimbolos.Tipo;
import tablasimbolos.Tipo.Tipos;
import java.util.ArrayList;

public class Gramatica implements GramaticaConstants {

/**  FIN LEXICO **/


/************** INICIO PARSER ****************/

/** ProducciÃ³n inicial
    analizar -> (instruccion)+ EOF
*/
  final public Arbol analizar() throws ParseException {ArrayList<AST> instrucciones = new ArrayList<AST>(); AST e;
    label_1:
    while (true) {
      e = instruccion();
instrucciones.add(e);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR_PUNTO:
      case IDENTIFICADOR_LETRA:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
System.out.println("END OF FILE");
    System.out.println("Instruccion " + e);
    {if ("" != null) return new Arbol(instrucciones);}
    throw new Error("Missing return statement in function");
}

/**
 * instruccion -> declaracion
*/
  final public AST instruccion() throws ParseException {AST e;
    e = declaracion();
System.out.println("DECLARACION -- " + e);
        {if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

/**
* declaracion -> ID = expresion
*/
  final public AST declaracion() throws ParseException {Token id; AST e = null;
    if (jj_2_1(3)) {
      id = jj_consume_token(IDENTIFICADOR_LETRA);
      jj_consume_token(IGUAL);
      e = expresion();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PCOMA:{
        jj_consume_token(PCOMA);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
System.out.println("declaracion *** " + e);
        {if ("" != null) return new Declaracion(id.image.trim(), e, token.beginLine, token.beginColumn);}
    } else if (jj_2_2(3)) {
      id = jj_consume_token(IDENTIFICADOR_PUNTO);
      jj_consume_token(IGUAL);
      e = expresion();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PCOMA:{
        jj_consume_token(PCOMA);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
System.out.println("declaracion *** " + e);
        {if ("" != null) return new Declaracion(id.image.trim(), e, token.beginLine, token.beginColumn);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/**
* expresion ->  condicion ? exp1 : exp1 [;]
*/
  final public AST expresion() throws ParseException {AST e, e1, e2;
    e = expresionOr();
System.out.println(e);
    label_2:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(QUESTION_MARK);
      e1 = expresionOr();
      jj_consume_token(DOS_PUNTOS);
      e2 = expresionOr();
e = new ExpresionTernaria(e, e1, e2, token.beginLine, token.beginColumn);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public AST expresionOr() throws ParseException {AST e, e1;
    e = expresionAnd();
System.out.println(e);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      e1 = expresionAnd();
e = new ExpresionLogica(e, e1, OperadorLogico.OR, token.beginLine, token.beginColumn);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public AST expresionAnd() throws ParseException {AST e, e1;
    e = primitivo();
System.out.println(e);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      e1 = primitivo();
e = new ExpresionLogica(e, e1, OperadorLogico.AND, token.beginLine, token.beginColumn);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public AST primitivo() throws ParseException {AST e; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
System.out.println("INTEGER " + token.image);
            {if ("" != null) return new Primitivo(new Tipo(Tipos.INTEGER), Integer.parseInt(token.image), token.beginLine, token.beginColumn);}
      break;
      }
    case NUMERIC:{
      jj_consume_token(NUMERIC);
System.out.println("NUMERIC " + token.image);
            {if ("" != null) return new Primitivo(new Tipo(Tipos.NUMERIC), Double.parseDouble(token.image), token.beginLine, token.beginColumn);}
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
System.out.println("BOOLEAN " + token.image);
            {if ("" != null) return new Primitivo(new Tipo(Tipos.BOOLEAN), Boolean.parseBoolean(token.image), token.beginLine, token.beginColumn);}
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
System.out.println("NULL " + token.image);
            {if ("" != null) return new Primitivo(new Tipo(Tipos.BOOLEAN), Double.parseDouble(token.image), token.beginLine, token.beginColumn);}
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
System.out.println("STRING " + t.image);
            {if ("" != null) return new Primitivo(new Tipo(Tipos.STRING), t.image.substring(1,t.image.length()-1), token.beginLine, token.beginColumn);}
      break;
      }
    case IDENTIFICADOR_PUNTO:{
      t = jj_consume_token(IDENTIFICADOR_PUNTO);
System.out.println("ID " + t.image + t.image.length());
            {if ("" != null) return new Identificador(t.image.trim(), token.beginLine, token.beginColumn);}
      break;
      }
    case IDENTIFICADOR_LETRA:{
      t = jj_consume_token(IDENTIFICADOR_LETRA);
System.out.println("ID " + t.image + " - " + t.image.length());
            {if ("" != null) return new Identificador(t.image.trim(), token.beginLine, token.beginColumn);}
      break;
      }
    case PARINI:{
      jj_consume_token(PARINI);
      e = expresion();
      jj_consume_token(PAREND);
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(IDENTIFICADOR_PUNTO)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_9()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_10()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_11()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_12()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_13()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_14()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_15()) return false;
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(PARINI)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(IDENTIFICADOR_LETRA)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(IDENTIFICADOR_LETRA)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(QUESTION_MARK)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(IDENTIFICADOR_PUNTO)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x40000,0x40000,0x0,0x0,0x87800,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x4800,0x0,0x0,0x20,0x10,0x44800,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new GramaticaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new GramaticaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new GramaticaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[51];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 6; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 51; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 3; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
