/* Gramatica.java */
/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
package analizador.descendente;

import abstracto.AST;
import expresiones.Funcion;
import expresiones.Identificador;
import expresiones.ExpresionLogica;
import expresiones.ExpresionLogica.OperadorLogico;
import expresiones.ExpresionTernaria;
import expresiones.ExpresionAritmetica;
import expresiones.ExpresionAritmetica.OperadorAritmetico;
import expresiones.ExpresionRelacional;
import expresiones.ExpresionRelacional.OperadorRelacional;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.If;
import instrucciones.Switch;
import expresiones.Case;
import expresiones.Default;
import instrucciones.Return;
import instrucciones.Break;
import instrucciones.Continue;
import expresiones.Llamada;
import expresiones.ArgumentoDefault;
import instrucciones.AsignacionIndiceEstructura;
import expresiones.AccesoEstructura;
import expresiones.Valor;
import expresiones.IndiceTipoUno;
import expresiones.IndiceTipoDos;
import expresiones.IndiceTipoUnoMatriz;
import expresiones.IndiceTipoDosMatriz;
import expresiones.IndiceTipoTresMatriz;
import instrucciones.Declaracion;
import excepciones.Excepcion;
import estructuras.Vector;
import tablasimbolos.Arbol;
import tablasimbolos.Tipo;
import tablasimbolos.Tipo.TipoDato;
import tablasimbolos.Tipo.TipoEstructura;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Arrays;

public class Gramatica implements GramaticaConstants {
    public LinkedList<Excepcion> listaExcepciones = new LinkedList<>();

/**  FIN LEXICO **/


/************** INICIO PARSER ****************/

/** Produccion inicial
    analizar -> (instruccion)+ EOF
*/
//Arbol analizar() :
   ////{ArrayList<AST> instrucciones = new ArrayList<AST>(); AST e;}
   ////{
   ////  (e=instruccion() { instrucciones.add(e); } )+ <EOF>
   ////  {
   ////    System.out.println("END OF FILE");
   ////    return new Arbol(instrucciones);
   ////  }
   ////}
  final public 
ArrayList<AST> analizar(ArrayList<AST> instrucciones) throws ParseException {AST e;
    try {
      label_1:
      while (true) {
        e = instruccion();
instrucciones.add(e);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FOR:
        case DO:
        case WHILE:
        case SWITCH:
        case IF:
        case RETORNO:
        case BREAK:
        case CONTINUE:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
{if ("" != null) return instrucciones;}
    } catch (ParseException ex) {
Token t;
           listaExcepciones.add(new Excepcion("Sint\u00e1ctico", "Caracter no esperado '"+ ex.currentToken.next.image +"'. Se esperaba '"+ex.tokenImage[0]+"' o '"+ex.tokenImage[1]+"'.",ex.currentToken.next.beginLine,ex.currentToken.next.beginColumn));
           do {
               t = getNextToken();
               if(t.kind == EOF){
                {if ("" != null) return instrucciones;}
               }
            } while (t.kind != PCOMA && t!=null && t.kind != EOF );
           {if ("" != null) return analizar(instrucciones);}
    }
    throw new Error("Missing return statement in function");
}

/**
 * instruccion -> declaracion
*/
  final public AST instruccion() throws ParseException {AST e;
    if (jj_2_1(3)) {
      e = funcion();
{if ("" != null) return e;}
    } else if (jj_2_2(2)) {
      e = llamada();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PCOMA:{
        jj_consume_token(PCOMA);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
{if ("" != null) return e;}
    } else if (jj_2_3(2)) {
      e = declaracion();
{if ("" != null) return e;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        e = asignacionIndiceEstructura();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PCOMA:{
          jj_consume_token(PCOMA);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
{if ("" != null) return e;}
        break;
        }
      case RETORNO:{
        e = retorno();
{if ("" != null) return e;}
        break;
        }
      case BREAK:{
        e = insBreak();
{if ("" != null) return e;}
        break;
        }
      case CONTINUE:{
        e = insContinue();
{if ("" != null) return e;}
        break;
        }
      case IF:{
        e = sentenciaIf();
{if ("" != null) return e;}
        break;
        }
      case FOR:{
        e = cicloFor();
{if ("" != null) return e;}
        break;
        }
      case WHILE:{
        e = cicloWhile();
{if ("" != null) return e;}
        break;
        }
      case DO:{
        e = cicloDoWhile();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PCOMA:{
          jj_consume_token(PCOMA);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
{if ("" != null) return e;}
        break;
        }
      case SWITCH:{
        e = Switch();
{if ("" != null) return e;}
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

/**
* declaracion -> ID = expresion (;)?
*/
  final public AST declaracion() throws ParseException {Token id; AST e;
    id = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(IGUAL);
    e = expresion();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PCOMA:{
      jj_consume_token(PCOMA);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return new Declaracion(id.image.trim(), e, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
}

/**
* funcion -> ID = function(lista_parametros) { (instruccion)+ }
*/
  final public AST funcion() throws ParseException {Token id; ArrayList<AST> listaParametros, bloqueInstrucciones; AST e;
    if (jj_2_4(3)) {
      id = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      jj_consume_token(FUNCION);
      jj_consume_token(PARINI);
      listaParametros = listaParametros();
      jj_consume_token(PAREND);
      bloqueInstrucciones = bloqueInstrucciones();
{if ("" != null) return new Funcion(id.image.trim(), listaParametros, bloqueInstrucciones, token.beginLine, token.beginColumn);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        id = jj_consume_token(IDENTIFICADOR);
        jj_consume_token(IGUAL);
        jj_consume_token(PARINI);
        listaParametros = listaParametros();
        jj_consume_token(PAREND);
        jj_consume_token(IGUAL);
        jj_consume_token(MAYORQUE);
        bloqueInstrucciones = bloqueInstrucciones();
{if ("" != null) return new Funcion(id.image.trim(), listaParametros, bloqueInstrucciones, token.beginLine, token.beginColumn);}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

/**
* asignacionIndiceEstructura -> ID([expresion])+ = expresion (;)?
*/
  final public AST asignacionIndiceEstructura() throws ParseException {LinkedList<AST> posiciones; AST valor; Token t;
    t = jj_consume_token(IDENTIFICADOR);
    posiciones = indicesAcceso();
    jj_consume_token(IGUAL);
    valor = expresion();
{if ("" != null) return new AsignacionIndiceEstructura(t.image, posiciones, valor, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public AST accesoEstructura() throws ParseException {LinkedList<AST> posiciones; Token t;
    t = jj_consume_token(IDENTIFICADOR);
    posiciones = indicesAcceso();
{if ("" != null) return new AccesoEstructura(t.image, posiciones, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public LinkedList<AST> indicesAcceso() throws ParseException {LinkedList<AST> lista = new LinkedList<AST>(); AST e, e1, r;
    if (jj_2_7(3)) {
      jj_consume_token(CORI);
      e = expresion();
      jj_consume_token(CORD);
lista.add(new IndiceTipoUno(e, token.beginLine, token.beginColumn));
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CORI:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        if (jj_2_5(2)) {
          jj_consume_token(CORI);
          jj_consume_token(CORI);
          e = expresion();
          jj_consume_token(CORD);
          jj_consume_token(CORD);
lista.add(new IndiceTipoDos(e, token.beginLine, token.beginColumn));
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CORI:{
            jj_consume_token(CORI);
            e = expresion();
            jj_consume_token(CORD);
lista.add(new IndiceTipoUno(e, token.beginLine, token.beginColumn));
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
{if ("" != null) return lista;}
    } else if (jj_2_8(3)) {
      jj_consume_token(CORI);
      e = expresion();
      jj_consume_token(COMA);
r = new IndiceTipoDosMatriz(e, token.beginLine, token.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case NUMERIC:
      case BOOLEAN:
      case NULL:
      case DEFAULT_WORD:
      case PARINI:
      case MENOS:
      case NOT:
      case IDENTIFICADOR:
      case STRING:{
        e1 = expresion();
r = new IndiceTipoUnoMatriz(e, e1, token.beginLine, token.beginColumn);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(CORD);
lista.add(r);
        {if ("" != null) return lista;}
    } else if (jj_2_9(2)) {
      jj_consume_token(CORI);
      jj_consume_token(CORI);
      e = expresion();
      jj_consume_token(CORD);
      jj_consume_token(CORD);
lista.add(new IndiceTipoDos(e, token.beginLine, token.beginColumn));
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CORI:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        if (jj_2_6(2)) {
          jj_consume_token(CORI);
          jj_consume_token(CORI);
          e = expresion();
          jj_consume_token(CORD);
          jj_consume_token(CORD);
lista.add(new IndiceTipoDos(e, token.beginLine, token.beginColumn));
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CORI:{
            jj_consume_token(CORI);
            e = expresion();
            jj_consume_token(CORD);
lista.add(new IndiceTipoUno(e, token.beginLine, token.beginColumn));
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
{if ("" != null) return lista;}
    } else if (jj_2_10(2)) {
      jj_consume_token(CORI);
      jj_consume_token(COMA);
      e = expresion();
      jj_consume_token(CORD);
lista.add(new IndiceTipoTresMatriz(e, token.beginLine, token.beginColumn));
        {if ("" != null) return lista;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public AST llamada() throws ParseException {ArrayList<AST> expresiones; Token t;
    t = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARINI);
    expresiones = listaExpresiones();
    jj_consume_token(PAREND);
{if ("" != null) return new Llamada(t.image.trim(), expresiones, t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<AST> listaExpresiones() throws ParseException {ArrayList<AST> lista = new ArrayList<AST>(); AST e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:
    case NUMERIC:
    case BOOLEAN:
    case NULL:
    case DEFAULT_WORD:
    case PARINI:
    case MENOS:
    case NOT:
    case IDENTIFICADOR:
    case STRING:{
      e = expresion();
lista.add(e);
      label_4:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMA);
        e = expresion();
lista.add(e);
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
}

/**
* listaParametros -> expresion ( ',' expresion )*
*/
  final public ArrayList<AST> listaParametros() throws ParseException {Token id, id2; AST e, e1; ArrayList<AST> listaParametros = new ArrayList<AST>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      id = jj_consume_token(IDENTIFICADOR);
e = new Identificador(id.image.trim(), token.beginLine, token.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        e = expresion();
e = new Declaracion(id.image.trim(), e, token.beginLine, token.beginColumn);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
listaParametros.add(e);
      label_5:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(COMA);
        id2 = jj_consume_token(IDENTIFICADOR);
e1 = new Identificador(id2.image.trim(), token.beginLine, token.beginColumn);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IGUAL:{
          jj_consume_token(IGUAL);
          e1 = expresion();
e1 = new Declaracion(id2.image.trim(), e1, token.beginLine, token.beginColumn);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
listaParametros.add(e1);
      }
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
{if ("" != null) return listaParametros;}
    throw new Error("Missing return statement in function");
}

/**
* bloqueInstrucciones -> { (instruccion)* }
*/
  final public ArrayList<AST> bloqueInstrucciones() throws ParseException {ArrayList<AST> instrucciones = new ArrayList<AST>(); AST e;
    jj_consume_token(LLAVEI);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:
      case DO:
      case WHILE:
      case SWITCH:
      case IF:
      case RETORNO:
      case BREAK:
      case CONTINUE:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      e = instruccion();
instrucciones.add(e);
    }
    jj_consume_token(LLAVED);
{if ("" != null) return instrucciones;}
    throw new Error("Missing return statement in function");
}

  final public AST sentenciaIf() throws ParseException {AST e, e1; ArrayList<AST> instruccionesIf, instruccionesElse = new ArrayList<AST>();
    jj_consume_token(IF);
    jj_consume_token(PARINI);
    e = expresion();
    jj_consume_token(PAREND);
    instruccionesIf = bloqueInstrucciones();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      if (jj_2_13(2)) {
        jj_consume_token(ELSE);
        e1 = sentenciaIf();
instruccionesElse.add(e1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          jj_consume_token(ELSE);
          instruccionesElse = bloqueInstrucciones();
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
{if ("" != null) return new If(e, instruccionesIf, instruccionesElse, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public AST cicloFor() throws ParseException {AST e; Token id; ArrayList<AST> instrucciones;
    jj_consume_token(FOR);
    jj_consume_token(PARINI);
    id = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(IN);
    e = expresion();
    jj_consume_token(PAREND);
    instrucciones = bloqueInstrucciones();
{if ("" != null) return new For(id.image, e, instrucciones, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public AST cicloWhile() throws ParseException {AST e; ArrayList<AST> instrucciones;
    jj_consume_token(WHILE);
    jj_consume_token(PARINI);
    e = expresion();
    jj_consume_token(PAREND);
    instrucciones = bloqueInstrucciones();
{if ("" != null) return new While(e, instrucciones, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public AST cicloDoWhile() throws ParseException {AST e; ArrayList<AST> instrucciones;
    jj_consume_token(DO);
    instrucciones = bloqueInstrucciones();
    jj_consume_token(WHILE);
    jj_consume_token(PARINI);
    e = expresion();
    jj_consume_token(PAREND);
{if ("" != null) return new DoWhile(e, instrucciones, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public AST Switch() throws ParseException {AST e; ArrayList<AST> listaCases;
    jj_consume_token(SWITCH);
    jj_consume_token(PARINI);
    e = expresion();
    jj_consume_token(PAREND);
    jj_consume_token(LLAVEI);
    listaCases = bloqueCases();
    jj_consume_token(LLAVED);
{if ("" != null) return new Switch(e, listaCases, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<AST> bloqueCases() throws ParseException {ArrayList<AST> bloqueCases = new ArrayList<AST>(); AST e;
    label_7:
    while (true) {
      e = Case();
bloqueCases.add(e);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:
      case DEFAULT_WORD:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
    }
{if ("" != null) return bloqueCases;}
    throw new Error("Missing return statement in function");
}

  final public AST Case() throws ParseException {AST e, i; ArrayList<AST> instrucciones = new ArrayList<AST>(); Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASE:{
      jj_consume_token(CASE);
      e = expresion();
      jj_consume_token(DOS_PUNTOS);
      label_8:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_8;
        }
        i = instruccion();
instrucciones.add(i);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BREAK:{
        jj_consume_token(BREAK);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PCOMA:{
          jj_consume_token(PCOMA);
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
{if ("" != null) return new Case(e, instrucciones, token.beginLine, token.beginColumn);}
      break;
      }
    case DEFAULT_WORD:{
      id = jj_consume_token(DEFAULT_WORD);
      jj_consume_token(DOS_PUNTOS);
      label_9:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_9;
        }
        i = instruccion();
instrucciones.add(i);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BREAK:{
        jj_consume_token(BREAK);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PCOMA:{
          jj_consume_token(PCOMA);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
{if ("" != null) return new Case(new Default(), instrucciones, token.beginLine, token.beginColumn);}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public AST insBreak() throws ParseException {AST e;
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PCOMA:{
      jj_consume_token(PCOMA);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
{if ("" != null) return new Break(token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public AST insContinue() throws ParseException {AST e;
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PCOMA:{
      jj_consume_token(PCOMA);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
{if ("" != null) return new Continue(token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public AST retorno() throws ParseException {AST e;
    if (jj_2_16(3)) {
      jj_consume_token(RETORNO);
      jj_consume_token(PARINI);
      jj_consume_token(PAREND);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PCOMA:{
        jj_consume_token(PCOMA);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
{if ("" != null) return new Return(token.beginLine, token.beginColumn);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RETORNO:{
        jj_consume_token(RETORNO);
        jj_consume_token(PARINI);
        e = expresion();
        jj_consume_token(PAREND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PCOMA:{
          jj_consume_token(PCOMA);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          ;
        }
{if ("" != null) return new Return(e, token.beginLine, token.beginColumn);}
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

/**
* expresion ->  condicion ? exp1 : exp1 [;]
*/
  final public AST expresion() throws ParseException {AST e, e1, e2;
    e = expresionOr();
    label_10:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(QUESTION_MARK);
      e1 = expresion();
      jj_consume_token(DOS_PUNTOS);
      e2 = expresion();
e = new ExpresionTernaria(e, e1, e2, token.beginLine, token.beginColumn);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

/**
*   expresionOr -> expresionAnd ( '|' expresionAnd )*
*/
  final public AST expresionOr() throws ParseException {AST e, e1;
    e = expresionAnd();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      jj_consume_token(OR);
      e1 = expresionAnd();
e = new ExpresionLogica(e, e1, OperadorLogico.OR, token.beginLine, token.beginColumn);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

/**
*   expresionAnd -> expresionIgualdad ( '&' expresionIgualdad )*
*/
  final public AST expresionAnd() throws ParseException {AST e, e1;
    e = expresionIgualdad();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
      jj_consume_token(AND);
      e1 = expresionIgualdad();
e = new ExpresionLogica(e, e1, OperadorLogico.AND, token.beginLine, token.beginColumn);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

/**
*   expresionAnd -> expresionRelacional ( '==' expresionRelacional )*
                |   expresionRelacional ( '!=' expresionRelacional )*
*/
  final public AST expresionIgualdad() throws ParseException {AST e, e1;
    e = expresionRelacional();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUALA:
      case DIFERENTEDE:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIFERENTEDE:{
        jj_consume_token(DIFERENTEDE);
        e1 = expresionRelacional();
e = new ExpresionRelacional(e, e1, OperadorRelacional.DIFERENTEDE, token.beginLine, token.beginColumn);
        break;
        }
      case IGUALA:{
        jj_consume_token(IGUALA);
        e1 = expresionRelacional();
e = new ExpresionRelacional(e, e1, OperadorRelacional.IGUALA, token.beginLine, token.beginColumn);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

/**
*   expresionRelacional -> expresionAditiva ( '<' expresionAditiva )*
                |   expresionAditiva ( '>' expresionAditiva )*
                |   expresionAditiva ( '<=' expresionAditiva )*
                |   expresionAditiva ( '>=' expresionAditiva )*
*/
  final public AST expresionRelacional() throws ParseException {AST e, e1;
    e = expresionAditiva();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MENORQUE:
      case MAYORQUE:
      case MENORIGUAL:
      case MAYORIGUAL:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MENORQUE:{
        jj_consume_token(MENORQUE);
        e1 = expresionAditiva();
e = new ExpresionRelacional(e, e1, OperadorRelacional.MENORQUE, token.beginLine, token.beginColumn);
        break;
        }
      case MAYORQUE:{
        jj_consume_token(MAYORQUE);
        e1 = expresionAditiva();
e = new ExpresionRelacional(e, e1, OperadorRelacional.MAYORQUE, token.beginLine, token.beginColumn);
        break;
        }
      case MENORIGUAL:{
        jj_consume_token(MENORIGUAL);
        e1 = expresionAditiva();
e = new ExpresionRelacional(e, e1, OperadorRelacional.MENORIGUAL, token.beginLine, token.beginColumn);
        break;
        }
      case MAYORIGUAL:{
        jj_consume_token(MAYORIGUAL);
        e1 = expresionAditiva();
e = new ExpresionRelacional(e, e1, OperadorRelacional.MAYORIGUAL, token.beginLine, token.beginColumn);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

/**
*   expresionAditiva -> expresionMultiplicativa ( '+' expresionMultiplicativa )*
                |   expresionMultiplicativa ( '-' expresionMultiplicativa )*
*/
  final public AST expresionAditiva() throws ParseException {AST e, e1;
    e = expresionMultiplicativa();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:
      case MENOS:{
        ;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:{
        jj_consume_token(MAS);
        e1 = expresionMultiplicativa();
e = new ExpresionAritmetica(e, e1, OperadorAritmetico.SUMA, token.beginLine, token.beginColumn);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        if (jj_2_18(2)) {
          jj_consume_token(MENOS);
          e1 = expresionMultiplicativa();
e = new ExpresionAritmetica(e, e1, OperadorAritmetico.RESTA, token.beginLine, token.beginColumn);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

/**
*   expresionMultiplicativa -> expresionUnaria ( '*' expresionUnaria )*
                |   expresionUnaria ( '/' expresionUnaria )*
*/
  final public AST expresionMultiplicativa() throws ParseException {AST e, e1;
    e = expresionUnaria();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POR:
      case DIV:
      case POTENCIA:
      case MODULO:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POR:{
        jj_consume_token(POR);
        e1 = expresionUnaria();
e = new ExpresionAritmetica(e, e1, OperadorAritmetico.MULTIPLICACION, token.beginLine, token.beginColumn);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        e1 = expresionUnaria();
e = new ExpresionAritmetica(e, e1, OperadorAritmetico.DIVISION, token.beginLine, token.beginColumn);
        break;
        }
      case POTENCIA:{
        jj_consume_token(POTENCIA);
        e1 = expresionUnaria();
e = new ExpresionAritmetica(e, e1, OperadorAritmetico.POTENCIA, token.beginLine, token.beginColumn);
        break;
        }
      case MODULO:{
        jj_consume_token(MODULO);
        e1 = expresionUnaria();
e = new ExpresionAritmetica(e, e1, OperadorAritmetico.MODULO, token.beginLine, token.beginColumn);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public AST expresionUnaria() throws ParseException {AST e, e1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MENOS:{
      jj_consume_token(MENOS);
      e = valor();
{if ("" != null) return new ExpresionAritmetica(e, OperadorAritmetico.MENOSUNARIO, token.beginLine, token.beginColumn);}
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      e = valor();
{if ("" != null) return new ExpresionLogica(e, OperadorLogico.NOT, token.beginLine, token.beginColumn);}
      break;
      }
    case INTEGER:
    case NUMERIC:
    case BOOLEAN:
    case NULL:
    case DEFAULT_WORD:
    case PARINI:
    case IDENTIFICADOR:
    case STRING:{
      e = valor();
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public AST valor() throws ParseException {AST e; Token t; ArrayList<AST> argumentos; String cad;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
{if ("" != null) return new Valor(new Tipo(TipoDato.INTEGER, TipoEstructura.VECTOR), new Vector(Arrays.asList(Integer.parseInt(token.image))), token.beginLine, token.beginColumn);}
      break;
      }
    case NUMERIC:{
      jj_consume_token(NUMERIC);
{if ("" != null) return new Valor(new Tipo(TipoDato.NUMERIC, TipoEstructura.VECTOR), new Vector(Arrays.asList(Double.parseDouble(token.image))), token.beginLine, token.beginColumn);}
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
{if ("" != null) return new Valor(new Tipo(TipoDato.BOOLEAN, TipoEstructura.VECTOR), new Vector(Arrays.asList(Boolean.parseBoolean(token.image))), token.beginLine, token.beginColumn);}
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
{if ("" != null) return new Valor(new Tipo(TipoDato.STRING, TipoEstructura.VECTOR), new Vector(Arrays.asList(token.image)), token.beginLine, token.beginColumn);}
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
cad = t.image.substring(1,t.image.length()-1);
            cad = cad.replace("\\","\\");
            cad = cad.replace("\\n","\n");
            cad = cad.replace("\\t","\t");
            {if ("" != null) return new Valor(new Tipo(TipoDato.STRING, TipoEstructura.VECTOR), new Vector(Arrays.asList(cad)), token.beginLine, token.beginColumn);}
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      if (jj_2_19(2)) {
        e = llamada();
{if ("" != null) return e;}
      } else if (jj_2_20(2)) {
        e = accesoEstructura();
{if ("" != null) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFICADOR:{
          t = jj_consume_token(IDENTIFICADOR);
{if ("" != null) return new Identificador(t.image.trim(), token.beginLine, token.beginColumn);}
          break;
          }
        case DEFAULT_WORD:{
          jj_consume_token(DEFAULT_WORD);
{if ("" != null) return new ArgumentoDefault();}
          break;
          }
        case PARINI:{
          jj_consume_token(PARINI);
          e = expresion();
          jj_consume_token(PAREND);
{if ("" != null) return e;}
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(COMA)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(MAYORIGUAL)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(MENORIGUAL)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(MAYORQUE)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(MENORQUE)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_71()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_72()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_73()) return false;
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(IGUALA)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(DIFERENTEDE)) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_68()) return false;
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PARINI)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(CORI)) return true;
    if (jj_scan_token(COMA)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(CORI)) return true;
    if (jj_scan_token(CORI)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(CORI)) return true;
    if (jj_scan_token(CORI)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(QUESTION_MARK)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(CORI)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(COMA)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(CORI)) return true;
    if (jj_scan_token(CORI)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(CORI)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(CORD)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_7()) return false;
    jj_scanpos = xsp;
    if (!jj_3_8()) return false;
    jj_scanpos = xsp;
    if (!jj_3_9()) return false;
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(RETORNO)) return true;
    if (jj_scan_token(PARINI)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(RETORNO)) return true;
    if (jj_scan_token(PARINI)) return true;
    if (jj_scan_token(PAREND)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_16()) return false;
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_scan_token(PARINI)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(PARINI)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_4()) return false;
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_scan_token(FUNCION)) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(DEFAULT_WORD)) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(IGUAL)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(PARINI)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_58()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_59()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_60()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_61()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_62()) return false;
    jj_scanpos = xsp;
    if (!jj_3_19()) return false;
    jj_scanpos = xsp;
    if (!jj_3_20()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_63()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_64()) return false;
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(PARINI)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(PARINI)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_48()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_49()) return false;
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(MENOS)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(MODULO)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(POTENCIA)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_1()) return false;
    jj_scanpos = xsp;
    if (!jj_3_2()) return false;
    jj_scanpos = xsp;
    if (!jj_3_3()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_27()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_28()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_29()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_30()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_31()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_32()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_33()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_34()) return false;
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(POR)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_77()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_78()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_79()) return false;
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(PARINI)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(LLAVEI)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(MENOS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(MAS)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_76()) return false;
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x13a00,0x80000,0x80000,0x80000,0x13a00,0x80000,0x0,0x400000,0x400000,0x81081e0,0x400000,0x400000,0x81081e0,0x0,0x0,0x0,0x13a00,0x20000,0x20000,0xc000,0x80000,0x0,0x80000,0x0,0xc000,0x80000,0x80000,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0x4000000,0xf0000000,0xf0000000,0x81081e0,0x1e0,0x108000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x1e000,0x0,0x0,0x0,0x1e000,0x0,0x10000,0x0,0x0,0x90200,0x0,0x0,0x90200,0x1,0x1,0x10000,0x1e000,0x0,0x0,0x0,0x0,0x4000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x2000,0x100,0x80,0x60,0x60,0x1e,0x1e,0x0,0x0,0x0,0x0,0x90200,0x80000,0x10000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[20];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new GramaticaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new GramaticaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new GramaticaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[59];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 43; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 59; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 20; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
