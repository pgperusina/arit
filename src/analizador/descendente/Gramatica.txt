
DOCUMENT START
TOKENS
/** Lexico */<DEFAULT> SKIP : {
" "
| "\t"
| "\r"
| "\n"
| "#*" : MULTI_LINE_COMMENT
| "#" : IN_LINE_COMMENT
}

/* Comments */<IN_LINE_COMMENT> SKIP : {
"\n" : DEFAULT
}

<IN_LINE_COMMENT> MORE : {
<~[]>
}

<MULTI_LINE_COMMENT> SKIP : {
"#*" : DEFAULT
}

<MULTI_LINE_COMMENT> MORE : {
<~[]>
}

<DEFAULT> TOKEN : {
<INTEGER: (["0"-"9"])+>
| <NUMERIC: (["0"-"9"])+ "." (["0"-"9"])+>
| <BOOLEAN: "true" | "false">
| <NULL: "null">
| <FOR: "for">
| <IN: "in">
| <DO: "do">
| <WHILE: "while">
| <SWITCH: "switch">
| <CASE: "case">
| <DEFAULT_WORD: "default">
| <IF: "if">
| <ELSE: "else">
| <COMA: ",">
| <PCOMA: ";">
| <PARINI: "(">
| <PAREND: ")">
| <CORI: "[">
| <CORD: "]">
| <LLAVEI: "{">
| <LLAVED: "}">
| <MAS: "+">
| <MENOS: "-">
| <POR: "*">
| <DIV: "/">
| <MODULO: "%">
| <IGUAL: "=">
| <MENORQUE: "<">
| <MAYORQUE: ">">
| <MENORIGUAL: "<=">
| <MAYORIGUAL: ">=">
| <IGUALA: "==">
| <DIFERENTEDE: "!=">
| <AND: "&">
| <OR: "|">
| <NOT: "!">
| <QUESTION_MARK: "?">
| <DOS_PUNTOS: ":">
| <FUNCION: "function">
| <RETORNO: "return">
| <BREAK: "break">
| <CONTINUE: "continue">
| <IDENTIFICADOR: (["a"-"z"] | "." ("." | ["a"-"z"] | "_")+) ("." | ["a"-"z"] | "_" | ["0"-"9"])*>
}

///**
//* ID STARTING WITH DOT
//*/
//MORE :
//{
//    "." : ID_DOT_STATE
//}
//
//<ID_DOT_STATE> MORE :
//{
//    <("." | ["a"-"z"] | "_")+ ("." | ["a"-"z"] | "_" | ["0"-"9"])* >
//}
//
//<ID_DOT_STATE> TOKEN:
//{
//   <IDENTIFICADOR_PUNTO: [" ","\t","\r","\n"]>
//   { matchedToken.image = image.toString().trim(); } : DEFAULT
//}
//
///**
//* ID STARTING WITH LETTER
//*/
//MORE :
//{
//    <["a"-"z"]> : ID_LETTER_STATE
//}
//
//<ID_LETTER_STATE> MORE :
//{
//    <("." | ["a"-"z"] | "_" | ["0"-"9"])+ >
//}
//
//<ID_LETTER_STATE> TOKEN:
//{
//   <IDENTIFICADOR_LETRA: [" ","\t","\r","\n"]>
//   { matchedToken.image = image.toString().trim().substring(0,image.length()-1); } : DEFAULT
//}

/**
* STRING Tokens
* **/<DEFAULT> MORE : {
"\"" : STRING_STATE
}

<STRING_STATE> MORE : {
"\\\"" : {
| <~["\""]>
}

<STRING_STATE> TOKEN : {
<STRING: "\""> : DEFAULT
}

NON-TERMINALS
/**  FIN LEXICO **/


/************** INICIO PARSER ****************/

/** ProducciÃ³n inicial
    analizar -> (instruccion)+ EOF
*/	analizar	:=	( instruccion )+ <EOF>
/**
 * instruccion -> declaracion
*/	instruccion	:=	llamada ( <PCOMA> )?
		|	declaracion
		|	funcion
		|	retorno
		|	insBreak
		|	insContinue
		|	sentenciaIf
		|	cicloFor
		|	cicloWhile
		|	cicloDoWhile ( <PCOMA> )?
		|	Switch
/**
* declaracion -> ID = expresion (;)*
*/	declaracion	:=	<IDENTIFICADOR> <IGUAL> expresion ( <PCOMA> )?
/**
* funcion -> ID = function(lista_parametros) { (instruccion)+ }
*/	funcion	:=	<IDENTIFICADOR> <IGUAL> <FUNCION> <PARINI> listaParametros <PAREND> bloqueInstrucciones
		|	<IDENTIFICADOR> <IGUAL> <PARINI> listaParametros <PAREND> <IGUAL> <MAYORQUE> bloqueInstrucciones
	llamada	:=	<IDENTIFICADOR> <PARINI> listaExpresiones <PAREND>
	listaExpresiones	:=	( expresion ( <COMA> expresion )* )?
	argumentos	:=	<CORI> listaExpresiones <CORD>
/**
* listaParametros -> expresion ( ',' expresion )*
*/	listaParametros	:=	( <IDENTIFICADOR> ( <IGUAL> expresion )? ( <COMA> <IDENTIFICADOR> ( <IGUAL> expresion )? )* )?
/**
* bloqueInstrucciones -> { (instruccion)* }
*/	bloqueInstrucciones	:=	<LLAVEI> ( instruccion )* <LLAVED>
	sentenciaIf	:=	<IF> <PARINI> expresion <PAREND> bloqueInstrucciones ( <ELSE> sentenciaIf | <ELSE> bloqueInstrucciones )?
	cicloFor	:=	<FOR> <PARINI> <IDENTIFICADOR> <IN> expresion <PAREND> bloqueInstrucciones
	cicloWhile	:=	<WHILE> <PARINI> expresion <PAREND> bloqueInstrucciones
	cicloDoWhile	:=	<DO> bloqueInstrucciones <WHILE> <PARINI> expresion <PAREND>
	Switch	:=	<SWITCH> <PARINI> expresion <PAREND> <LLAVEI> bloqueCases <LLAVED>
	bloqueCases	:=	( Case )+
	Case	:=	<CASE> expresion <DOS_PUNTOS> ( instruccion )* ( <BREAK> ( <PCOMA> )? )?
		|	<DEFAULT_WORD> <DOS_PUNTOS> ( instruccion )* ( <BREAK> ( <PCOMA> )? )?
///**
//* asignacion -> ID([expresion])+ = expresion
//*/
//AST asignacion() :
//{ Token id; AST e, e1; }
//{
//    id =  <IDENTIFICADOR_LETRA>
//    (
//        <CORI> e = expresion() <CORD>
//    )+
//    <IGUAL> e1 = expresion() (<PCOMA>)?
//    { return new Asignacion(id.image.trim(), e, e1, token.beginLine, token.beginColumn); }
//    |
//    id =  <IDENTIFICADOR_PUNTO>
//    (
//        <CORI> e = expresion() <CORD>
//    )+
//    <IGUAL> e1 = expresion() (<PCOMA>)?
//    { return new Asignacion(id.image.trim(), e, e1, token.beginLine, token.beginColumn); }
//}
	insBreak	:=	<BREAK> ( <PCOMA> )?
	insContinue	:=	<CONTINUE> ( <PCOMA> )?
	retorno	:=	<RETORNO> <PARINI> expresion <PAREND> ( <PCOMA> )?
		|	<RETORNO> ( <PCOMA> )?
/**
* expresion ->  condicion ? exp1 : exp1 [;]
*/	expresion	:=	expresionOr ( <QUESTION_MARK> expresion <DOS_PUNTOS> expresion )*
/**
*   expresionOr -> expresionAnd ( '|' expresionAnd )*
*/	expresionOr	:=	expresionAnd ( <OR> expresionAnd )*
/**
*   expresionAnd -> expresionIgualdad ( '&' expresionIgualdad )*
*/	expresionAnd	:=	expresionIgualdad ( <AND> expresionIgualdad )*
/**
*   expresionAnd -> expresionRelacional ( '==' expresionRelacional )*
                |   expresionRelacional ( '!=' expresionRelacional )*
*/	expresionIgualdad	:=	expresionRelacional ( <DIFERENTEDE> expresionRelacional | <IGUALA> expresionRelacional )*
/**
*   expresionRelacional -> expresionAditiva ( '<' expresionAditiva )*
                |   expresionAditiva ( '>' expresionAditiva )*
                |   expresionAditiva ( '<=' expresionAditiva )*
                |   expresionAditiva ( '>=' expresionAditiva )*
*/	expresionRelacional	:=	expresionAditiva ( <MENORQUE> expresionAditiva | <MAYORQUE> expresionAditiva | <MENORIGUAL> expresionAditiva | <MAYORIGUAL> expresionAditiva )*
/**
*   expresionAditiva -> expresionMultiplicativa ( '+' expresionMultiplicativa )*
                |   expresionMultiplicativa ( '-' expresionMultiplicativa )*
*/	expresionAditiva	:=	expresionMultiplicativa ( <MAS> expresionMultiplicativa | <MENOS> expresionMultiplicativa )*
/**
*   expresionMultiplicativa -> expresionUnaria ( '*' expresionUnaria )*
                |   expresionUnaria ( '/' expresionUnaria )*
*/	expresionMultiplicativa	:=	expresionUnaria ( <POR> expresionUnaria | <DIV> expresionUnaria | <MODULO> expresionUnaria )*
	expresionUnaria	:=	<MENOS> expresionUnaria
		|	<NOT> expresionUnaria
		|	primitivo
	primitivo	:=	<INTEGER>
		|	<NUMERIC>
		|	<BOOLEAN>
		|	<NULL>
		|	<STRING>
		|	llamada
		|	<IDENTIFICADOR>
		|	argumentos
		|	<DEFAULT_WORD>
		|	<PARINI> expresion <PAREND>

DOCUMENT END
